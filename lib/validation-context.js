"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var keyword = require("esutils").keyword;
var isRestrictedWord = keyword.isRestrictedWord;
var isReservedWordES5 = keyword.isReservedWordES5;
var ValidationContext = (function () {
  var ValidationContext = function ValidationContext(freeBreakStatements, freeContinueStatements, usedLabelNames, freeJumpTargets, freeReturnStatements, errors, strictErrors) {
    this.freeBreakStatements = freeBreakStatements;
    this.freeContinueStatements = freeContinueStatements;
    this.usedLabelNames = usedLabelNames;
    this.freeJumpTargets = freeJumpTargets;
    this.freeReturnStatements = freeReturnStatements;
    this.errors = errors;
    this.strictErrors = strictErrors;
  };

  ValidationContext.empty = function () {
    return new ValidationContext([], [], [], [], [], [], []);
  };

  ValidationContext.prototype.addFreeBreakStatement = function (s) {
    return new ValidationContext(this.freeBreakStatements.concat([s]), this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.clearFreeBreakStatements = function () {
    return new ValidationContext([], this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.addFreeContinueStatement = function (s) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements.concat([s]), this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.clearFreeContinueStatements = function () {
    return new ValidationContext(this.freeBreakStatements, [], this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.observeIterationLabelName = function (label) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames.concat([label.name]), this.freeJumpTargets.filter(function (info) {
      return info.name !== label.name;
    }), this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.observeNonIterationLabelName = function (label) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames.concat([label.name]), this.freeJumpTargets.filter(function (info) {
      return info.name !== label.name || info.type !== "break";
    }), this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.clearUsedLabelNames = function () {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, [], this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.addFreeBreakJumpTarget = function (label) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets.concat([{ name: label.name, type: "break" }]), this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.addFreeContinueJumpTarget = function (label) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets.concat([{ name: label.name, type: "continue" }]), this.freeReturnStatements, this.errors, this.strictErrors);
  };

  ValidationContext.prototype.addFreeReturnStatement = function (r) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements.concat([r]), this.errors, this.strictErrors);
  };

  ValidationContext.prototype.clearFreeReturnStatements = function () {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, [], this.errors, this.strictErrors);
  };

  ValidationContext.prototype.checkReserved = function (identifier) {
    if (isReservedWordES5(identifier.name, true)) {
      if (isReservedWordES5(identifier.name, false)) {
        return this.addError(new ValidationError(identifier, "Identifier must not be reserved word in this position"));
      }
      return this.addStrictError(new ValidationError(identifier, "Identifier must not be strict mode reserved word in this position"));
    }
    return this;
  };

  ValidationContext.prototype.checkRestricted = function (identifier) {
    var v = this.checkReserved(identifier);
    if (isRestrictedWord(identifier.name)) {
      return v.addStrictError(new ValidationError(identifier, "Identifier must not be restricted word in this position in strict mode"));
    }
    return v;
  };

  ValidationContext.prototype.addError = function (e) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors.concat([e]), this.strictErrors);
  };

  ValidationContext.prototype.addErrors = function (errors) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors.concat(errors), this.strictErrors);
  };

  ValidationContext.prototype.addStrictError = function (e) {
    return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.errors, this.strictErrors.concat([e]));
  };

  ValidationContext.prototype.concat = function (v) {
    return new ValidationContext(this.freeBreakStatements.concat(v.freeBreakStatements), this.freeContinueStatements.concat(v.freeContinueStatements), this.usedLabelNames.concat(v.usedLabelNames), this.freeJumpTargets.concat(v.freeJumpTargets), this.freeReturnStatements.concat(v.freeReturnStatements), this.errors.concat(v.errors), this.strictErrors.concat(v.strictErrors));
  };

  return ValidationContext;
})();

exports.ValidationContext = ValidationContext;
var ValidationError = (function (Error) {
  var ValidationError = function ValidationError(node, message) {
    this.node = node;
    this.message = message;
  };

  _extends(ValidationError, Error);

  return ValidationError;
})(Error);

exports.ValidationError = ValidationError;
//# sourceMappingURL=data:application/json;base64,